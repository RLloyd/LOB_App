AngularJS Line of Business Application
This exercise is based on the Pluralsight online course by Deborah Kurata
This are some of the notes working on the different versions of the project.

Topics covered that I was really interested:
- UI_Router
- $resource
- $httpBackend

Exercise breakdown:
x1:
- Using ng-init to populate the view template (html) with some json data within the table element

x2:
Defined Angular module method:
- Setter method needs 2 parameters, name and DI array (of dependencies)
- ie: angular.module("moduleName", [DI's]);
- Getter method: angular.module("moduleName");
- THE IIFE JS Pattern: Immediately-Invoked Function Expression. (function(){...}()); aka: Self-executing anonymous function
	• IIFE is a function expression and not a function declaration.

Add Controller Function by registration:
- Start with the IIFE
- Look up the module
- Registering the controller with the module:
	• angular.module("gdApp").controller("ProductListCtrl", function ProductListCtrl(DIs){...);
- Write the code for the controller

The use of "Controller As" :: simplified $scope handling
- $scope is not required as a parameter
- Model and methods are defined on the controller itself
- Reference using an alias
- $scope still exists behind the scenes

Added bootstrap.css to beautify the view.
- class = "panel panel-primary"...

The working project gets populated from the "ProductListController".
Images can be shown and hide using ng-if and not ng-show.
ng-if only fetch the image data when called.

x3:
Added services
Defined another module called "common.services"
- Added the ff as DIs:
	- ngResource
	- ProductResourceService
- "common.services" gets injected in "app" module
- "common.services" module is also called in "productResource" module
	for creating a new factory/services module
- Took the data out from "productListCtrl"

Add $httpBackend to simulate REST api service.
$httpBackend intercepts the request and fake the web service for a responds
Mocks the calls to the Web Service
Returns static data to the application
Two implementations:
- ngMock: for unit testing apps
- ngMockE2E: for End-to-end testing or backend-less development (we use this)

x4:
SPA: Single Page Application

Add Editing and Saving capabilities
-

Add routing using ui-router not ngRouter
- ui-router uses states


Site Map:
Menu:
	- Welcome Page = state: home
	- Product List = state: productList
		- Product Details = state: productDetail
		-- Product Edit (accessible from main menu as well) = state: productEdit

Add ui-router.js in index.html script tag
Add ui-router as DI in "app" module, setup .config...
Setup the view template in "index.html", use ui-sref="state name"

x5:
Implementing Product Details



